
SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for alembic_version
-- ----------------------------
DROP TABLE IF EXISTS `alembic_version`;
CREATE TABLE `alembic_version` (
  `version_num` varchar(32) NOT NULL,
  PRIMARY KEY (`version_num`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of alembic_version
-- ----------------------------
INSERT INTO `alembic_version` VALUES ('5986223c8d27');

-- ----------------------------
-- Table structure for banner
-- ----------------------------
DROP TABLE IF EXISTS `banner`;
CREATE TABLE `banner` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `image_url` varchar(255) NOT NULL,
  `link_url` varchar(255) NOT NULL,
  `priority` int(11) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of banner
-- ----------------------------
INSERT INTO `banner` VALUES ('1', '美女1', 'http://pgmhjjvoy.bkt.clouddn.com/o_1cq89hrsh24npsn1mrm1c7p1cbl7.jpg', 'http://pass', '1', '2018-10-20 16:30:59');
INSERT INTO `banner` VALUES ('7', '风景3', 'http://pgmhjjvoy.bkt.clouddn.com/o_1cq89hc7k1jpo1n5vl1k138k1ab17.jpg', 'http://pass', '6', '2018-10-25 11:42:11');
INSERT INTO `banner` VALUES ('8', '美女壁纸', 'http://pgmhjjvoy.bkt.clouddn.com/o_1cqknq6qt1680he01in4a3r1aoe7.jpg', 'http://www.netbian.com/desk/6682-1920x1080.htm', '7', '2018-10-25 12:30:56');
INSERT INTO `banner` VALUES ('9', '壁纸1', 'http://pgmhjjvoy.bkt.clouddn.com/o_1cqpkt0iq1ba6vr1176i1s8q11487.jpg', 'http://www.baidu.com', '4', '2018-10-27 10:16:13');
INSERT INTO `banner` VALUES ('10', '壁纸2', 'http://pgmhjjvoy.bkt.clouddn.com/o_1cqpktr4k1m5u1kb8gm23vs1eds7.jpg', 'http://pass', '8', '2018-10-27 10:16:36');
INSERT INTO `banner` VALUES ('11', '壁纸3', 'http://pgmhjjvoy.bkt.clouddn.com/o_1cqpkuerc1p7a1kemsmff3l1ahs7.jpg', 'http://paa.com', '9', '2018-10-27 10:16:55');
INSERT INTO `banner` VALUES ('12', '壁纸', 'http://pgmhjjvoy.bkt.clouddn.com/o_1cqpkv10o2ai17i41649lqh1k427.jpg', 'http://aaaa.com', '10', '2018-10-27 10:17:16');

-- ----------------------------
-- Table structure for board
-- ----------------------------
DROP TABLE IF EXISTS `board`;
CREATE TABLE `board` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(20) NOT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of board
-- ----------------------------
INSERT INTO `board` VALUES ('1', 'Python基础', '2018-10-13 17:09:27');
INSERT INTO `board` VALUES ('2', 'Flask全栈开发', '2018-10-13 17:09:44');
INSERT INTO `board` VALUES ('3', 'MySQL', '2018-10-13 17:20:33');
INSERT INTO `board` VALUES ('4', '杂七杂八', '2018-10-18 18:36:42');
INSERT INTO `board` VALUES ('5', 'Linux', '2018-10-20 16:32:36');
INSERT INTO `board` VALUES ('6', 'frp', '2018-10-27 10:31:42');

-- ----------------------------
-- Table structure for cms_role
-- ----------------------------
DROP TABLE IF EXISTS `cms_role`;
CREATE TABLE `cms_role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) NOT NULL,
  `desc` varchar(200) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  `permissions` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of cms_role
-- ----------------------------
INSERT INTO `cms_role` VALUES ('1', '访问者', '只能相关数据，不能修改。', '2018-09-28 10:40:23', '1');
INSERT INTO `cms_role` VALUES ('2', '运营者', '管理帖子，管理评论,管理前台用户。', '2018-09-28 10:40:23', '23');
INSERT INTO `cms_role` VALUES ('3', '管理员', '拥有本系统所有权限。', '2018-09-28 10:40:23', '63');
INSERT INTO `cms_role` VALUES ('4', '开发者', '开发人员专用角色。', '2018-09-28 10:40:23', '255');

-- ----------------------------
-- Table structure for cms_role_user
-- ----------------------------
DROP TABLE IF EXISTS `cms_role_user`;
CREATE TABLE `cms_role_user` (
  `cms_role_id` int(11) NOT NULL,
  `cms_user_id` int(11) NOT NULL,
  PRIMARY KEY (`cms_role_id`,`cms_user_id`),
  KEY `cms_user_id` (`cms_user_id`),
  CONSTRAINT `cms_role_user_ibfk_1` FOREIGN KEY (`cms_role_id`) REFERENCES `cms_role` (`id`),
  CONSTRAINT `cms_role_user_ibfk_2` FOREIGN KEY (`cms_user_id`) REFERENCES `cms_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of cms_role_user
-- ----------------------------
INSERT INTO `cms_role_user` VALUES ('4', '1');

-- ----------------------------
-- Table structure for cms_user
-- ----------------------------
DROP TABLE IF EXISTS `cms_user`;
CREATE TABLE `cms_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(50) NOT NULL COMMENT '账号是邮箱地址，密码是6个4',
  `_password` varchar(100) NOT NULL,
  `email` varchar(50) NOT NULL,
  `join_time` datetime DEFAULT NULL,
  `is_display` int(1) DEFAULT '1',
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of cms_user
-- ----------------------------
INSERT INTO `cms_user` VALUES ('1', 'Admin', 'pbkdf2:sha256:50000$HWuoCNGY$f085b999a88efc7892cbdc82b7f4164bfc7704ad8d27f5b386637f53af2e588c', 'admin@admin.com', '2018-09-28 10:42:37', '1');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` text NOT NULL,
  `create_time` datetime DEFAULT NULL,
  `post_id` int(11) DEFAULT NULL,
  `author_id` varchar(100) NOT NULL,
  `is_display` varchar(1) DEFAULT '1' COMMENT '默认1显示,0表示删除,不显示',
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `post_id` (`post_id`),
  CONSTRAINT `comment_ibfk_1` FOREIGN KEY (`author_id`) REFERENCES `front_user` (`id`),
  CONSTRAINT `comment_ibfk_2` FOREIGN KEY (`post_id`) REFERENCES `post` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of comment
-- ----------------------------

-- ----------------------------
-- Table structure for front_user
-- ----------------------------
DROP TABLE IF EXISTS `front_user`;
CREATE TABLE `front_user` (
  `id` varchar(100) NOT NULL,
  `username` varchar(50) NOT NULL,
  `tel` varchar(11) NOT NULL,
  `_password` varchar(100) NOT NULL COMMENT '账号是邮箱地址，密码是6个1',
  `email` varchar(50) DEFAULT NULL,
  `realname` varchar(50) DEFAULT NULL,
  `avatar` varchar(100) DEFAULT NULL,
  `signature` varchar(100) DEFAULT NULL,
  `gender` enum('MALE','FEMALE','SECRET','UNKOWN') DEFAULT NULL,
  `is_display` int(1) DEFAULT '1' COMMENT '默认1允许发帖，0禁止发帖',
  `join_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `tel` (`tel`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of front_user
-- ----------------------------
INSERT INTO `front_user` VALUES ('9FZRXngUf4kVhjmeQymjYe', 'Sandu', '18344174701', 'pbkdf2:sha256:50000$q8I2o1W1$4cbf2c1be3dc5cfa110d43907bdc4de3bcdc5e00299f0a85b93da679de28145b', '1103324414@qq.com', null, null, null, 'UNKOWN', '1', '2018-10-10 16:18:51');

-- ----------------------------
-- Table structure for highlight_comment
-- ----------------------------
DROP TABLE IF EXISTS `highlight_comment`;
CREATE TABLE `highlight_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `comment_id` int(11) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `comment_id` (`comment_id`),
  CONSTRAINT `highlight_comment_ibfk_1` FOREIGN KEY (`comment_id`) REFERENCES `comment` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of highlight_comment
-- ----------------------------

-- ----------------------------
-- Table structure for highlight_post
-- ----------------------------
DROP TABLE IF EXISTS `highlight_post`;
CREATE TABLE `highlight_post` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `post_id` int(11) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `post_id` (`post_id`),
  CONSTRAINT `highlight_post_ibfk_1` FOREIGN KEY (`post_id`) REFERENCES `post` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of highlight_post
-- ----------------------------
INSERT INTO `highlight_post` VALUES ('1', '2', '2018-11-03 10:05:57');
INSERT INTO `highlight_post` VALUES ('2', '4', '2018-11-03 11:34:39');

-- ----------------------------
-- Table structure for post
-- ----------------------------
DROP TABLE IF EXISTS `post`;
CREATE TABLE `post` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) NOT NULL,
  `content` text NOT NULL,
  `create_time` datetime DEFAULT NULL,
  `board_id` int(11) NOT NULL,
  `author_id` varchar(100) NOT NULL,
  `is_display` varchar(1) DEFAULT '1' COMMENT '默认1显示,0表示删除,不显示',
  PRIMARY KEY (`id`),
  KEY `author_id` (`author_id`),
  KEY `board_id` (`board_id`),
  CONSTRAINT `post_ibfk_1` FOREIGN KEY (`author_id`) REFERENCES `front_user` (`id`),
  CONSTRAINT `post_ibfk_2` FOREIGN KEY (`board_id`) REFERENCES `board` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of post
-- ----------------------------
INSERT INTO `post` VALUES ('1', ' Nginx + Flask + Gunicorn+ Supervisor 搭建 Python Web', '<span style=\"font-size: 20px;\">一、 更新<br/>#yum -y install epel-release<br/>#yum clean all &amp;&amp; yum makecache<br/>#yum -y update<br/>二、安装python3<br/>系统自带的python版本是2，并且没有安装pip<br/>1、python2安装pip<br/>#yum -y install python-pip (前提已安装epel-release)<br/>更新pip: pip install --upgrade pip <br/>[root@localhost ~]# pip -V<br/>2、安装python3<br/>系统自带的python2还有好多其他系统组件在使用，比如yum，所以要把python3安装到其他目录下<br/>(1)安装相关包<br/># yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make&nbsp; libffi-devel<br/>(2)下载 Python 3.7.0源码包<br/>#cd /usr/local/src &amp;&amp;<br/>wget&nbsp;&nbsp; https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz<br/>(3)#tar xf Python-3.7.0.tar.xz (yum -y install xz #若失败,重建yum缓 yum clean all ,yum makecache) <br/>(4)#cd Python-3.7.0<br/>(5)#./configure --prefix=/usr/local/python3 <br/>(6)#make &amp;&amp; make install<br/>安装成功后的提示：<br/>Collecting setuptools<br/>Collecting pip<br/>Installing collected packages: setuptools, pip Successfully installed pip-10.0.1 setuptools-39.0.1<br/>//从 Python 3.4 开始就已经自带了 pip 和easy_install（setuptools 包带的命令） 包管理命令，你可以在 /usr/local/python3/bin/ 目录<br/>下看到，查看一下已经安装的扩展包： <br/>(7)#/usr/local/python3/bin/pip3 list <br/>Package&nbsp;&nbsp;&nbsp; Version<br/>---------- -------<br/>pip&nbsp;&nbsp; &nbsp;10.0.1<br/>setuptools 39.0.1<br/>// 更新pip(若上述命令提示pip版本不是最新则需要更新) <br/>(8)#/usr/local/python3/bin/pip3 install --upgrade pip<br/>(9)创建软连接<br/>执行ln -s /usr/local/python3/bin/python3 /usr/bin/python3命令创建python3软连接。<br/>执行ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3命令创建pip3软连接查看Python3和pip3是否安装成功。<br/># python3 -V Python 3.7.0<br/># pip3 -V<br/>pip 10.0.1 from /usr/local/python3/lib/python3.7/site-packages/pip&nbsp; (python 3.7) &nbsp;<br/>这样一来，python出来的是python2.7,python3出来的是python3.5.2,互不干扰。<br/>三、创建项目目录，安装虚拟环境<br/>(1)创建项目目录，安装虚拟环境<br/>#mkdir –p /home/microblog &amp;&amp; cd /home/microblog &amp;&amp; python3 -m venv&nbsp; venv<br/>(2)激活虚拟环境，安装项目所需的依赖包<br/>需要事先把requirements.txt放入项目所在目录中<br/>[root@localhost microblog]# source venv/bin/activate<br/>(venv) [root@localhost microblog]#pip3 install -r&nbsp; requirements.txt<br/>(3)上传项目代码<br/>演示使用，本例用一个最简单的flask应用：mocroblog.py<br/>#!/usr/bin/env python<br/># -*- coding: utf-8 -*- <br/>from flask import Flask <br/>app = Flask(__name__)<br/>@app.route(&#39;/&#39;)<br/>@app.route(&#39;/index&#39;) <br/>def index():<br/>&nbsp;&nbsp;&nbsp; return &quot;Hello World!&quot;<br/>if name == &#39; main &#39;: <br/>&nbsp;&nbsp;&nbsp; app.run()<br/>(4)测试<br/>(venv) [root@localhost microblog]# python3 microblog.py<br/>*&nbsp;&nbsp; &nbsp;Serving Flask app &quot;microblog&quot; (lazy loading)<br/>*&nbsp;&nbsp; &nbsp;Environment: production<br/>WARNING: Do not use the development server in a production&nbsp; environment.<br/>Use a production WSGI server instead.<br/>*&nbsp;&nbsp; &nbsp;Debug mode: off<br/>*&nbsp;&nbsp; &nbsp;Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)<br/>再打开一个窗口，运行：<br/>[root@localhost ~]# curl -i http://127.0.0.1:5000 HTTP/1.0 200 OK<br/>Content-Type: text/html; charset=utf-8<br/>Content-Length: 12<br/>Server: Werkzeug/0.14.1 Python/3.7.0 Date: Sat, 07 Jul 2018 03:52:31 GMT<br/>Hello World!<br/>一切正常！<br/>四、安装项目使用的web服务<br/>1、安装nginx<br/># yum install nginx<br/>默认安装目录：/etc/nginx<br/>2、安装supervisor<br/>注意：此软件要求系统Python版本不能高于3<br/>#yum install supervisor<br/>3、安装gunicorn<br/>注意，这个要安装在项目使用的虚拟环境中[root@localhost nginx]# cd /home/microblog/ [root@localhost microblog]# source venv/bin/activate (venv) [root@localhost microblog]# pip3 install gunicorn<br/>五、相关配置文件设置<br/>(1)&nbsp;&nbsp; &nbsp;nginx相关配置<br/>把nginx.conf中server{}块注释，在/etc/nginx/conf.d/目录中添加项目使用的以conf结尾的文件，比如：m.conf，内容如下：<br/>server {<br/>listen 80; #nginx监听端口<br/>server_name 192.168.109.128; #域名或IP<br/>&nbsp;&nbsp;&nbsp; location / {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_pass http://127.0.0.1:9000; #监听代理端口<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_redirect off;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header&nbsp; X-Forwarded-For $proxy_add_x_forwarded_for;<br/>&nbsp;&nbsp;&nbsp; }<br/>}<br/>重载nginx服务：service nginx start<br/>(2)&nbsp;&nbsp; &nbsp;supervisor配置<br/>默认配置文件：(1)/etc/supervisord.conf 在该文件最后一行有这样的信息：<br/>[include]<br/>files = supervisord.d/*.ini<br/>也就说说我们在这个目录下创建一个以ini结尾的文件即可比如：/etc/supervisord.d/m.ini<br/>其内容如下：<br/>[program:microblog] directory = /home/microblog<br/>command = /home/microblog/venv/bin/gunicorn -b 127.0.0.1:9000 -w 2 microblog:app #一定要是虚拟环境中的绝对路径<br/>user = root <br/>autostart = true <br/>autorestart = true <br/>stopasgroup = true <br/>killasgroup = true<br/>startsecs = 5<br/>startretries = 3 <br/>redirect_stderr = true<br/>stdout_logfile_maxbytes = 20MB <br/>stdout_logfile_backups = 20<br/>stdout_logfile = /var/log/usercenter_stdout.log<br/><br/>启动：supervisord -c /etc/supervisord.conf<br/><br/>五、测试<br/>使用浏览器访问：ip即可得到flask响应的结果： 注意防火墙放行80端口<br/><br/>nginx+gunicorn+flask:这种模式就是不使用supervisor管理gunicorn<br/>单独执行gunicorn命令：gunicorn -b 127.0.0.1:9000 microblog:app<br/><br/>扩展1:supervisorctl的使用<br/>supervisorctl status&nbsp;&nbsp; &nbsp;# 查询进程状态<br/>supervisorctl stop node # 关闭[program:node] 的进程supervisorctl start node # 启动[program:node] 的进程supervisorctl restart node # 重启[program:node] 的进程supervisorctl stop all&nbsp;&nbsp;&nbsp;&nbsp; # 关闭所有进程<br/>supervisorctl start all&nbsp;&nbsp; &nbsp;# 启动所有进程<br/>supervisorctl reload&nbsp;&nbsp; &nbsp;# 重新读取配置文件,读取有更新（增加）的配置文件，不会启动新添加的程序<br/>supervisorctl update&nbsp;&nbsp; &nbsp;# 重启配置文件修改过的程序<br/><br/>扩展2：常见的gunicorn配置<br/>[program:microblog]<br/>directory = /home/microblog; 程序的启动目录<br/>command = gunicorn -c gunicorn.py wsgi:app ; 启动命令，可以看出与手动在命令行启动的命令是一样的autostart = true&nbsp;&nbsp; &nbsp;; 在 supervisord 启动的时候也自动启动<br/>startsecs = 5&nbsp;&nbsp; &nbsp;; 启动 5 秒后没有异常退出，就当作已经正常启动了<br/>autorestart = true ; 程序异常退出后自动重启startretries = 3&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;; 启动失败自动重试次数，默认是 3 user = leon&nbsp;&nbsp; &nbsp;; 用哪个用户启动<br/>redirect_stderr = true ; 把 stderr 重 定 向 到 stdout， 默 认 false stdout_logfile_maxbytes = 20MB ; stdout 日志文件大小，默认 50MB stdout_logfile_backups = 20&nbsp;&nbsp; &nbsp;; stdout 日志文件备份数<br/>; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）<br/>stdout_logfile = /data/logs/usercenter_stdout.log<br/>&nbsp;<br/></span><p><span style=\"font-size: 20px;\">若是项目中没有设置debug=True，则更改项目内容后想看到效果需要重载一下supervisor服务supervisorctl reload</span></p><span style=\"font-size: 20px;\"><br/></span>', '2018-11-02 18:09:26', '2', '9FZRXngUf4kVhjmeQymjYe', '0');
INSERT INTO `post` VALUES ('2', 'Nginx + Flask + Gunicorn+ Supervisor 搭建 Python Web', '<p><span style=\"font-size: 20px;\">一、 更新yum<br/>#yum -y install epel-release<br/>#yum clean all &amp;&amp; yum makecache<br/>#yum -y update<br/>二、安装python3<br/>系统自带的python版本是2，并且没有安装pip<br/>1、python2安装pip<br/>#yum -y install python-pip (前提是已安装epel-release)<br/>更新pip: <br/></span></p><p><span style=\"font-size: 20px;\">#pip install --upgrade pip <br/>[root@localhost ~]# pip -V</span></p><p><span style=\"font-size: 20px;\">pip 18.1 from /usr/lib/python2.7/site-packages/pip (python 2.7)<br/></span></p><p><span style=\"font-size: 20px;\">2、安装python3<br/>系统自带的python2还有好多其他系统组件在使用，比如yum，所以要把python3安装到其他目录下<br/>(1)安装相关包<br/># yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make&nbsp; libffi-devel<br/>(2)下载 Python 3.7.0源码包<br/>#cd /usr/local/src &amp;&amp; wget&nbsp;&nbsp; https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz<br/>(3)#tar xf Python-3.7.0.tar.xz (yum -y install xz #若失败,重建yum缓 yum clean all&nbsp; &amp;&amp; yum makecache) <br/>(4)#cd Python-3.7.0<br/>(5)#./configure --prefix=/usr/local/python3 <br/>(6)#make &amp;&amp; make install<br/>安装成功后的提示：<br/>Collecting setuptools<br/>Collecting pip<br/>Installing collected packages: setuptools, pip Successfully installed pip-10.0.1 setuptools-39.0.1<br/>//从 Python 3.4 开始就已经自带了 pip 和easy_install（setuptools 包带的命令） 包管理命令，你可以在 /usr/local/python3/bin/ 目录下看到，查看一下已经安装的扩展包： <br/>(7)#/usr/local/python3/bin/pip3 list <br/>Package&nbsp;&nbsp;&nbsp; Version<br/>---------- -------<br/>pip&nbsp;&nbsp; &nbsp;10.0.1<br/>setuptools 39.0.1<br/>// 更新pip(若上述命令提示pip版本不是最新则需要更新) <br/>(8)#/usr/local/python3/bin/pip3 install --upgrade pip<br/>(9)创建软连接<br/>执行ln -s /usr/local/python3/bin/python3 /usr/bin/python3命令创建python3软连接。<br/>执行ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3命令创建pip3软连接查看Python3和pip3是否安装成功。<br/># python3 -V</span></p><p><span style=\"font-size: 20px;\"> Python 3.7.0<br/># pip3 -V<br/>pip 10.0.1 from /usr/local/python3/lib/python3.7/site-packages/pip&nbsp; (python 3.7) &nbsp;<br/>这样一来，python出来的是python2.7,python3出来的是python3.5.2，pip与pip3均互不干扰。<br/>三、创建项目目录，安装虚拟环境<br/>(1)创建项目目录，安装虚拟环境<br/>#mkdir –p /home/microblog &amp;&amp; cd /home/microblog &amp;&amp; python3 -m venv&nbsp; venv<br/>(2)激活虚拟环境，安装项目所需的依赖包<br/>需要事先把requirements.txt放入项目所在目录中<br/>[root@localhost microblog]# source venv/bin/activate<br/>(venv) [root@localhost microblog]#pip3 install -r&nbsp; requirements.txt (或使用绝对路径：<span style=\"font-size: 20px;\">/home/microblog</span>/venv/bin/pip3)<br/>(3)上传项目代码<br/>演示使用，本例用一个最简单的flask应用：<span style=\"font-size: 20px; background-color: rgb(255, 255, 0);\">mocroblog</span>.py<br/>#!/usr/bin/env python<br/># -*- coding: utf-8 -*- <br/>from flask import Flask <br/><span style=\"font-size: 20px; background-color: rgb(255, 255, 0);\">app </span>= Flask(__name__)<br/>@app.route(&#39;/&#39;)<br/>@app.route(&#39;/index&#39;) <br/>def index():<br/>&nbsp;&nbsp;&nbsp; return &quot;Hello World!&quot;<br/>if name == &#39;__main__&#39;: <br/>&nbsp;&nbsp;&nbsp; app.run()<br/>(4)测试<br/>(venv) [root@localhost microblog]# python3 microblog.py <span style=\"font-size: 20px;\">(或使用绝对路径：<span style=\"font-size: 20px;\">/home/microblog</span>/venv/bin/python3)</span><br/></span></p><p><span style=\"font-size: 20px;\">*&nbsp;&nbsp; &nbsp;Serving Flask app &quot;microblog&quot; (lazy loading)<br/>*&nbsp;&nbsp; &nbsp;Environment: production<br/>WARNING: Do not use the development server in a production&nbsp; environment.<br/>Use a production WSGI server instead.<br/>*&nbsp;&nbsp; &nbsp;Debug mode: off<br/>*&nbsp;&nbsp; &nbsp;Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)<br/>再打开一个窗口，运行：<br/>[root@localhost ~]# curl -i http://127.0.0.1:5000 <br/></span></p><p><span style=\"font-size: 20px;\">HTTP/1.0 200 OK<br/>Content-Type: text/html; charset=utf-8<br/>Content-Length: 12<br/>Server: Werkzeug/0.14.1 Python/3.7.0 Date: Sat, 07 Jul 2018 03:52:31 GMT<br/>Hello World!<br/>一切正常！<br/>四、安装项目使用的web服务<br/>1、安装nginx<br/># yum install nginx<br/>默认安装目录：/etc/nginx<br/>2、安装supervisor<br/>注意：此软件要求系统Python版本不能高于3<br/>#yum install supervisor<br/>3、安装gunicorn<br/>注意，这个要安装在项目使用的虚拟环境中</span></p><p><span style=\"font-size: 20px;\">[root@localhost\n nginx]# cd /home/microblog/</span></p><p><span style=\"font-size: 20px;\"> [root@localhost microblog]# source \nvenv/bin/activate <br/></span></p><p><span style=\"font-size: 20px;\">(venv) [root@localhost microblog]# pip3 install \ngunicorn<br/>五、相关配置文件设置<br/>(1)&nbsp;&nbsp; &nbsp;nginx相关配置<br/>把nginx.conf中server{}块注释，在/etc/nginx/conf.d/目录中添加项目使用的以conf结尾的文件，比如：m.conf，内容如下：<br/>server {<br/>listen 80; #nginx监听端口<br/>server_name 192.168.109.128; #域名或IP<br/>&nbsp;&nbsp;&nbsp; location / {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_pass http://127.0.0.1:9000; #监听<span style=\"font-size: 20px;\">gunicorn</span>代理端口,可以跟python自带web运行的5000端口不一样<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_redirect off;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header&nbsp; X-Forwarded-For $proxy_add_x_forwarded_for;<br/>&nbsp;&nbsp;&nbsp; }<br/>}<br/>重载nginx服务：service nginx start<br/>(2)&nbsp;&nbsp; &nbsp;supervisor配置<br/>默认配置文件：(1)/etc/supervisord.conf 在该文件最后一行有这样的信息：<br/>[include]<br/>files = supervisord.d/*.ini<br/>也就是说我们在这个目录下创建一个以ini结尾的文件即可比如：/etc/supervisord.d/<span style=\"font-size: 20px; background-color: rgb(0, 176, 80);\">m</span>.ini<br/>其内容如下：<br/>[program:<span style=\"font-size: 20px; background-color: rgb(0, 176, 240);\">microblog</span>]&nbsp; #项目名称<br/></span></p><p><span style=\"font-size: 20px;\">directory = /home/microblog #<span style=\"font-size: 20px;\">项目路径</span><br/></span></p><p><span style=\"font-size: 20px;\">command = /home/microblog/venv/bin/gunicorn -b 127.0.0.1:9000 -w 2 <span style=\"font-size: 20px; background-color: rgb(255, 255, 0);\">microblog</span>:<span style=\"font-size: 20px; background-color: rgb(255, 255, 0);\">app</span></span></p><p><span style=\"font-size: 20px;\"> #一定要是虚拟环境中的绝对路径，<span style=\"font-size: 20px;\"><span style=\"font-size: 20px; background-color: rgb(255, 255, 0);\">microblog</span></span>是主程序运行文件，也就是app所在的文件，<br/></span></p><p><span style=\"font-size: 20px;\">其中 <span style=\"font-size: 20px;\"><span style=\"font-size: 20px;\"><span style=\"font-size: 20px; background-color: rgb(255, 255, 0);\">microblog</span></span></span>就是指 <span style=\"font-size: 20px;\"><span style=\"font-size: 20px;\"><span style=\"font-size: 20px; background-color: rgb(255, 255, 0);\">microblog</span></span></span>.py，app 就是那个 wsgifunc 的名字，这样运行监听 9000 端口，原先的 5000 端口并没有启用，-w 表示开启多少个 worker，-b 表示 Gunicorn 开发的访问地址</span></p><p><span style=\"font-size: 20px;\">user = root <br/>autostart = true <br/>autorestart = true <br/>stopasgroup = true <br/>killasgroup = true<br/>startsecs = 5<br/>startretries = 3 <br/>redirect_stderr = true<br/>stdout_logfile_maxbytes = 20MB <br/>stdout_logfile_backups = 20<br/>stdout_logfile = /var/log/usercenter_stdout.log<br/></span></p><p><span style=\"font-size: 20px;\">stderr_logfile = <span style=\"font-size: 20px;\">/var/log/usercenter_stderr.log</span></span></p><br/><span style=\"font-size: 20px;\"></span><p><span style=\"font-size: 20px;\">启动：supervisord -c /etc/supervisord.conf<br/><br/>五、测试<br/>使用浏览器访问：ip</span></p><p><span style=\"font-size: 20px;\">即可得到flask响应的结果： 注意防火墙放行80端口<br/><br/>nginx+gunicorn+flask:这种模式就是不使用supervisor管理gunicorn<br/>单独执行gunicorn命令：gunicorn -b 127.0.0.1:9000 microblog:app<br/><br/>扩展1:supervisorctl的使用<br/>supervisorctl status&nbsp;&nbsp; &nbsp;# 查询进程状态<br/>supervisorctl\n stop node # 关闭[program:node] 的进程supervisorctl start node # \n启动[program:node] 的进程supervisorctl restart node # 重启[program:node] \n的进程supervisorctl stop all&nbsp;&nbsp;&nbsp;&nbsp; # 关闭所有进程<br/>supervisorctl start all&nbsp;&nbsp; &nbsp;# 启动所有进程<br/>supervisorctl reload&nbsp;&nbsp; &nbsp;# 重新读取配置文件,读取有更新（增加）的配置文件，不会启动新添加的程序<br/>supervisorctl update&nbsp;&nbsp; &nbsp;# 重启配置文件修改过的程序<br/><br/>扩展2：常见的gunicorn配置<br/>[program:microblog]<br/>directory = /home/microblog; 程序的启动目录<br/>command = gunicorn -c gunicorn.py wsgi:app ; 启动命令，可以看出与手动在命令行启动的命令是一样的autostart = true&nbsp;&nbsp; &nbsp;; 在 supervisord 启动的时候也自动启动<br/>startsecs = 5&nbsp;&nbsp; &nbsp;; 启动 5 秒后没有异常退出，就当作已经正常启动了<br/>autorestart = true ; 程序异常退出后自动重启startretries = 3&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;; 启动失败自动重试次数，默认是 3 user = leon&nbsp;&nbsp; &nbsp;; 用哪个用户启动<br/>redirect_stderr\n = true ; 把 stderr 重 定 向 到 stdout， 默 认 false stdout_logfile_maxbytes = \n20MB ; stdout 日志文件大小，默认 50MB stdout_logfile_backups = 20&nbsp;&nbsp; &nbsp;; stdout \n日志文件备份数<br/>; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）<br/>stdout_logfile = /data/logs/usercenter_stdout.log<br/>&nbsp;<br/></span><br/></p><p><span style=\"font-size: 20px;\">若是项目中没有设置debug=True，则更改项目内容后想看到效果需要重载一下supervisor服务supervisorctl reload</span></p><p><span style=\"font-size: 20px;\"><br/></span></p><p><span style=\"font-size: 20px;\">6:<span style=\"font-size: 20px;\">supervisor</span>配置web管理</span></p><p>(1)修改配置文件：/etc/supervisord.conf<br/>#这几行解注释（即删除每行的第一个;），同时将127.0.0.1改为0.0.0.0 ，端口号根据实际情况修改<br/>[inet_http_server] ; inet (TCP) server disabled by default <br/>port=0.0.0.0:9001 ; (ip_address:port specifier, *:port for all iface) <br/>username=user ; (default is no username (open server)) <br/>password=123 ; (default is no password (open server)) <br/><br/>[supervisorctl] <br/>serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL for a unix socket <br/>serverurl=http://0.0.0.0:9001 ; use an http:// url to specify an inet socket <br/>username=user ; should be same as http_username if set <br/>password=123 ; should be same as http_password if set<span style=\"font-size: 20px;\"><span style=\"font-size:14px;font-family:&#39;Calibri&#39;,sans-serif\"></span></span></p><p><br/></p><p><span style=\"font-size:14px;font-family:宋体\">访问的话直接使用服务器</span><span style=\"font-size:14px;font-family:&#39;Calibri&#39;,sans-serif\">ip:port</span><span style=\"font-size:14px;font-family:宋体\">进行访问(或者域名：port)，输入账号和密码，进入到如下界面：</span></p><p><span style=\"font-size:14px;font-family:宋体\"><img src=\"/ueditor/files/58d99dd1e64915021a8385d29c2e5fa7.png/\" title=\"58d99dd1e64915021a8385d29c2e5fa7.png\" alt=\"11.png\"/></span></p><p></p><p><span style=\"font-family:宋体\">其中，</span>run,test<span style=\"font-family:宋体\">是</span>/etc/supervisord.d/<span style=\"font-family:宋体\">目录下的</span>.ini<span style=\"font-family:宋体\">文件，每个文件代表一个项目</span></p><p><span style=\"font-size:14px;font-family:宋体\"></span><img src=\"/ueditor/files/da3bf83b1db292671a369b5f986721f0.png/\" title=\"da3bf83b1db292671a369b5f986721f0.png\" alt=\"222.png\"/></p>', '2018-11-03 09:59:55', '2', '9FZRXngUf4kVhjmeQymjYe', '1');
INSERT INTO `post` VALUES ('3', 'virtualenv 环境下 Nginx + Flask + Gunicorn+ Supervisor 搭建 Python Web', '<p>注：这个帖子是转发自他人的，地址：<a href=\"https://www.cnblogs.com/oneapm/p/4648445.html\">https://www.cnblogs.com/oneapm/p/4648445.html</a></p><p><br/></p><p>在这篇文章里，我们将搭建一个简单的 Web 应用，在虚拟环境中基于 Flask 框架，用 Gunicorn 做 wsgi 容器，用 \nSupervisor 管理进程，然后使用 Python 探针来监测应用性能，形成一个「闭环」 ！希望能对大家有所帮助，首先简单来介绍一下环境：</p><p><strong>系统环境：ubuntu 14.04 Python 2.7.6</strong></p><h2>安装组件库</h2><p>第一步安装所需要的存储库，因为打算用到虚拟环境，用到 pip 安装和管理 Python 组件，所以先更新本地包，然后安装组件：</p><pre>sudo&nbsp;apt-get&nbsp;updatesudo&nbsp;apt-get&nbsp;install&nbsp;python-pip&nbsp;python-dev&nbsp;nginx</pre><h2>创建虚拟环境 virtualenv</h2><p>在一个系统中创建不同的 Python 隔离环境，相互之间还不会影响，为了使系统保持干净，遂决定用 virtualenv 跑应用程序，创建一个容易识别的目录，开始安装，再创建项目目录 super，然后激活环境：</p><pre>sudo&nbsp;pip&nbsp;install&nbsp;virtualenv\nmkdir&nbsp;~/supervisor&nbsp;&amp;&amp;&nbsp;cd&nbsp;~/supervisor\nvirtualenv&nbsp;supersource&nbsp;super/bin/activate</pre><h2>安装 Flask 框架</h2><p>好了，现在在虚拟环境里面，开始安装 Flask 框架，flask 依赖两个库 werkzeug 和 jinjia2, 采用 pip 方式安装即可, pip 是一个重要的工具，Python 用它来管理包：</p><pre>pip&nbsp;install&nbsp;flask</pre><p>先用 Flask 写一个简单的 Web 服务 myweb.py ，因为后面要做一些测试，所以设置了几个请求：</p><pre>from&nbsp;flask&nbsp;import&nbsp;Flask\napp&nbsp;=&nbsp;Flask(__name__)\n@app.route(&#39;/&#39;)\ndef&nbsp;index():&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&#39;hello&nbsp;world&nbsp;&nbsp;supervisor&nbsp;gunicorn&nbsp;&#39;\n@app.route(&#39;/1&#39;)\ndef&nbsp;index1():&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&#39;hello&nbsp;world&nbsp;&nbsp;supervisor&nbsp;gunicorn&nbsp;&nbsp;ffffff&#39;\n@app.route(&#39;/qw/1&#39;)\ndef&nbsp;indexqw():&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&#39;hello&nbsp;world&nbsp;&nbsp;supervisor&nbsp;gunicorn&nbsp;fdfdfbdfbfb&nbsp;&#39;\nif&nbsp;__name__&nbsp;==&nbsp;&#39;__main__&#39;:\n&nbsp;&nbsp;&nbsp;&nbsp;app.debug&nbsp;=&nbsp;True\n&nbsp;&nbsp;&nbsp;&nbsp;app.run()</pre><p>启动 Flask 看看！</p><pre>python&nbsp;myweb.py</pre><p>在浏览器中访问 http://127.0.0.1:5000 就可以看到了「几个路径都试一试」</p><h2>用 Gunicorn 部署 Python Web</h2><p>现在我们使用 Flask 自带的服务器，完成了 Web 服务的启动。生产环境下，Flask 自带的服务器，无法满足性能要求。所以我们这里采用 Gunicorn 做 wsgi 容器，用来部署 Python，首先还是安装 Gunicorn：</p><pre>pip&nbsp;install&nbsp;gunicorn</pre><p>当我们安装好 Gunicorn 之后，需要用 Gunicorn 启动 Flask，Flask 用自带的服务器启动时，Flask 里面的 \nname 里面的代码启动了 app.run()。而这里我们使用 Gunicorn，myweb.py 就等同于一个库文件，被 Gunicorn \n调用，这样启动：</p><pre>gunicorn&nbsp;-w&nbsp;4&nbsp;-b&nbsp;0.0.0.0:8000&nbsp;myweb:app</pre><p>其中 myweb 就是指 myweb.py，app 就是那个 wsgifunc 的名字，这样运行监听 8000 端口，原先的 5000 端口并没有启用，-w 表示开启多少个 worker，-b 表示 Gunicorn 开发的访问地址。</p><p>想要结束 Gunicorn 只需执行 pkill Gunicorn，但有时候还要 ps 找到 pid 进程号才能 \nkill。可是这对于一个开发来说，太过于繁琐，因此出现了另外一个神器 \n---supervisor，一个专门用来管理进程的工具，还可以管理系统的工具进程。</p><h2>安装 Supervisor</h2><pre>pip&nbsp;install&nbsp;supervisor\necho_supervisord_conf&nbsp;&gt;&nbsp;supervisor.conf&nbsp;&nbsp;#&nbsp;生成&nbsp;supervisor&nbsp;默认配置文件gedit&nbsp;&nbsp;supervisor.conf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;#&nbsp;修改&nbsp;supervisor&nbsp;配置文件，&nbsp;添加&nbsp;gunicorn&nbsp;进程管理\n&nbsp;在&nbsp;supervisor.conf&nbsp;底部下添加&nbsp;myweb.py&nbsp;的配置&nbsp;`/home/wang/supervisor/super`&nbsp;是我的项目目录」\n[program:myweb]command=/home/wang/supervisor/super/bin/gunicorn&nbsp;-w&nbsp;4&nbsp;-b&nbsp;0.0.0.0:8000&nbsp;myweb:app&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ndirectory=/home/wang/supervisor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nstartsecs=0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nstopwaitsecs=0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nautostart=false&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nautorestart=false&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nuser=wang&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nstdout_logfile=/home/wang/supervisor/log/gunicorn.log&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nstderr_logfile=/home/wang/supervisor/log/gunicorn.err</pre><p>supervisor 的基本使用命令：</p><pre>supervisord&nbsp;-c&nbsp;supervisor.conf&nbsp;&nbsp;&nbsp;&nbsp;\nsupervisorctl&nbsp;-c&nbsp;supervisor.conf&nbsp;status&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;查看supervisor的状态&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nsupervisorctl&nbsp;-c&nbsp;supervisor.conf&nbsp;reload&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;重新载入&nbsp;配置文件\nsupervisorctl&nbsp;-c&nbsp;supervisor.conf&nbsp;start&nbsp;[all]|[appname]&nbsp;&nbsp;&nbsp;启动指定/所有&nbsp;supervisor&nbsp;管理的程序进程\nsupervisorctl&nbsp;-c&nbsp;supervisor.conf&nbsp;stop&nbsp;[all]|[appname]&nbsp;&nbsp;&nbsp;&nbsp;关闭指定/所有&nbsp;supervisor&nbsp;管理的程序进程</pre><p>supervisor 还有一个 web 的管理界面，可以激活。更改下配置：</p><pre>[inet_http_server]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;inet&nbsp;(TCP)&nbsp;server&nbsp;disabled&nbsp;by&nbsp;default\nport=127.0.0.1:9001&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;(ip_address:port&nbsp;specifier,&nbsp;*:port&nbsp;for&nbsp;alliface)\nusername=wang&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;(default&nbsp;is&nbsp;no&nbsp;username&nbsp;(open&nbsp;server)\npassword=123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;(default&nbsp;is&nbsp;no&nbsp;password&nbsp;(open&nbsp;server))\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;use&nbsp;a&nbsp;unix://&nbsp;URL&nbsp;&nbsp;for&nbsp;a&nbsp;unix&nbsp;socket\nserverurl=http://127.0.0.1:9001&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;use&nbsp;an&nbsp;http://&nbsp;url&nbsp;to&nbsp;specify&nbsp;an&nbsp;inet&nbsp;socket\nusername=wang&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;should&nbsp;be&nbsp;same&nbsp;as&nbsp;http_username&nbsp;if&nbsp;set\npassword=123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;should&nbsp;be&nbsp;same&nbsp;as&nbsp;http_password&nbsp;if&nbsp;set\n;prompt=mysupervisor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;cmd&nbsp;line&nbsp;prompt&nbsp;(default&nbsp;&quot;supervisor&quot;)\n;history_file=~/.sc_history&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;use&nbsp;readline&nbsp;history&nbsp;if&nbsp;available</pre><p>现在可以使用 supervsior 启动 gunicorn 啦。运行命令:</p><pre>supervisord&nbsp;-c&nbsp;supervisor.conf</pre><p>浏览器访问 http://127.0.0.1:9001 可以得到 supervisor 的 web 管理界面，访问 http://127.0.0.1:8000 可以看见 gunicorn 启动的返回的页面。</p><h2>配置 Nginx</h2><p>前面我们已经在系统环境下安装了 Nginx, 安装好的 Nginx 二进制文件放在 /usr/sbin/ 文件夹下，接下来使用 \nSupervisor 来管理 Nginx。这里需要注意一个问题，权限问题。Nginx 是 sudo 的方式安装，启动的适合也是 root \n用户，那么我们现在也需要用 root 用户启动 supervisor。在 supervisor.conf 下添加配置文件：</p><pre>[program:nginx]\ncommand=/usr/sbin/nginx\nstartsecs=0\nstopwaitsecs=0\nautostart=falsea\nutorestart=false\nstdout_logfile=/home/wang/supervisor/log/nginx.log\nstderr_logfile=/home/wang/supervisor/log/nginx.err</pre><p>好了，都配置完之后，启动 supervisor：</p><pre>supervisord&nbsp;-c&nbsp;supervisor.conf</pre><p>访问页面，也可以用 ab 进行压力测试：</p><pre>ab&nbsp;-c&nbsp;100&nbsp;-n&nbsp;100&nbsp;http://127.0.0.1:8000/qw/1</pre><p>-c 用于指定压力测试的并发数, -n 用于指定压力测试总共的执行次数。</p><h2>安装 Python 探针</h2><p>搭建好了 web，想实时监控应用数据，有什么好的工具，用 OneAPM 的 Python 探针试试，<br/>首先也是安装 Python 探针：</p><pre>pip&nbsp;install&nbsp;-i&nbsp;http://pypi.oneapm.com/simple&nbsp;--upgrade&nbsp;blueware</pre><p>根据 License Key 生成配置文件：</p><pre>blueware-admin&nbsp;generate-config&nbsp;(License&nbsp;Key)&nbsp;=&nbsp;blueware.ini</pre><p>由于是在虚拟环境下，所以要特别注意路径，修改 supervisor.conf 里面两项：</p><pre>[program:myapp]\ncommand&nbsp;=&nbsp;/home/wang/supervisor/super/bin/blueware-admin&nbsp;run-program&nbsp;/home/wang/supervisor/super/bin/gunicorn&nbsp;-w&nbsp;4&nbsp;-b&nbsp;0.0.0.0:8000&nbsp;myapp:app\nenvironment&nbsp;=&nbsp;BLUEWARE_CONFIG_FILE=blueware.ini</pre><p>重启应用</p><pre>supervisorctl&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;进入命令行supervisor&gt;&nbsp;&nbsp;reload&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;重新加载</pre><p>向上面一样访问页面，也可以用 ab 进行压力测试<br/>几分钟后有下图，可以看到页面加载时间，web 事物，页面吞吐量，其中后面是设置自定义事物「Business Transaction」。</p><p><br/></p>', '2018-11-03 10:05:16', '2', '9FZRXngUf4kVhjmeQymjYe', '1');
INSERT INTO `post` VALUES ('4', '为网站添加https支持', '<p>注：此片帖子参考如下其他帖子，结合自身实际整理而成。</p><p>参考帖子地址：</p><p>（1）为网站添加https支持&nbsp; <a href=\"https://fanzheng.org/archives/21\">https://fanzheng.org/archives/21</a><br/></p><p class=\"title\">（2）Let&#39;s Encrypt，免费好用的 HTTPS 证书 <a href=\"https://imququ.com/post/letsencrypt-certificate.html\">https://imququ.com/post/letsencrypt-certificate.html</a><br/></p><p class=\"title\">（3）本博客 Nginx 配置之完整篇 <a href=\"https://imququ.com/post/my-nginx-conf.html\">https://imququ.com/post/my-nginx-conf.html</a><br/></p><p class=\"title\"><br/></p><h3>创建帐号</h3><p>首先创建一个目录，例如 、/home/microblog/<code>ssl/</code>，用来存放各种临时文件和最后的证书文件。</p><p>进入这个目录，创建一个 RSA 私钥用于 Let&#39;s Encrypt 识别你的身份：</p><pre>openssl&nbsp;genrsa&nbsp;4096&nbsp;&gt;&nbsp;account.key</pre><h3>创建 CSR 文件</h3><p>接着就可以生成 CSR（Certificate Signing \nRequest，证书签名请求）文件了。在这之前，还需要创建域名私钥（一定不要使用上面的账户私钥），根据证书不同类型，域名私钥也可以选择 RSA 和\n ECC 两种不同类型。</p><p>我这采用的是RSA类型<br/></p><p>创建 RSA 私钥（兼容性好）：</p><pre>openssl&nbsp;genrsa&nbsp;4096&nbsp;&gt;&nbsp;domain.key</pre>有了私钥文件，就可以生成 CSR 文件了。在 CSR 中推荐至少把域名带 www 和不带 www 的两种情况都加进去，其它子域可以根据需要添加（目前一张证书最多可以包含 100 个域名）：<br/><p>示例：openssl req -new -sha256 -key domain.key -subj &quot;/&quot; -reqexts SAN -config &lt;(cat /etc/ssl/openssl.cnf &lt;(printf &quot;[SAN]\\nsubjectAltName=DNS:yoursite.com,DNS:www.yoursite.com&quot;)) &gt; domain.csr</p><p><br/></p><p>执行这一步时，如果提示找不到 <code>/etc/ssl/openssl.cnf</code> 文件，请看看 <code>/usr/local/openssl/ssl/openssl.cnf</code> 是否存在。如果还是不行，也可以使用交互方式创建 CSR（需要注意 Common Name 必须为你的域名）：</p><pre>openssl&nbsp;req&nbsp;-new&nbsp;-sha256&nbsp;-key&nbsp;domain.key&nbsp;-out&nbsp;domain.csr</pre><p>实际操作：openssl req -new -sha256 -key domain.key -subj &quot;/&quot; -reqexts SAN -config &lt;(cat /usr/local/ssl/openssl.cnf &lt;(printf &quot;[SAN]\\nsubjectAltName=DNS:blog.lehuoha.com&quot;)) &gt; domain.csr</p><p>注意我的openssl.cnf路径为：/usr/local/ssl/openssl.cnf，域名是：blog.lehuoha.com</p><p><br/></p><h3>配置验证服务</h3><p>我们知道，CA 在签发 DV（Domain Validation）证书时，需要验证域名所有权。传统 CA 的验证方式一般是往 <code>admin@yoursite.com</code> 发验证邮件，而 Let&#39;s Encrypt 是在你的服务器上生成一个随机验证文件，再通过创建 CSR 时指定的域名访问，如果可以访问则表明你对这个域名有控制权。具体来说，他会访问网站的<code>/.well-known/acme-challenge/</code>目录来查看有没有他要求的文件。</p><p>在这里，我们只需在网站根目录下创建该文件夹即可。</p><p>首先创建用于存放验证文件的目录，例如：</p><pre>mkdir&nbsp;-p&nbsp;/home/microblog/.well-known/acme-challenge</pre><p>然后配置一个 HTTP 服务，以 Nginx 为例：</p><p>(示例)：实际情况需要修改域名，alias别名路径，以及location /{ } 信息等，若有location /{ }的配置参数的话则只需要添加 rewrite ^/(.*)$ https://yoursite.com/$1 permanent;即可</p><p>&nbsp;&nbsp;&nbsp;&nbsp;server {<br/>&nbsp;&nbsp;&nbsp; server_name www.yoursite.com yoursite.com;<br/><br/>&nbsp;&nbsp;&nbsp; location ^~ /.well-known/acme-challenge/ {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alias /home/xxx/www/challenges/;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try_files $uri =404;<br/>&nbsp;&nbsp;&nbsp; }<br/><br/>&nbsp;&nbsp;&nbsp; location / {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rewrite ^/(.*)$ https://yoursite.com/$1 permanent;<br/>&nbsp;&nbsp;&nbsp; }<br/>}</p><p><br/></p><p>以上配置优先查找 <code>~/www/challenges/</code> 目录下的文件，如果找不到就重定向到 HTTPS 地址。这个验证服务以后更新证书还要用到，建议一直保留。</p><p><br/></p><p>实际配置：</p><p>server {<br/>&nbsp;&nbsp;&nbsp; listen 80;<br/>&nbsp;&nbsp;&nbsp; server_name blog.lehuoha.com;<br/><br/><span style=\"background-color: rgb(255, 255, 0);\">&nbsp;&nbsp;&nbsp; location ^~ /.well-known/acme-challenge/ {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alias /home/microblog/challenges/;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try_files $uri =404;<br/>&nbsp;&nbsp;&nbsp; }</span><br/><br/><br/>&nbsp;&nbsp;&nbsp; location / {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_pass http://127.0.0.1:4010;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_redirect off;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header Host $host;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header X-Real-IP $remote_addr;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"background-color: rgb(255, 255, 0);\"> rewrite ^/(.*)$ https://blog.lehuoha.com/$1 permanent;</span><br/>&nbsp;&nbsp;&nbsp; }<br/>}</p><p><br/></p><h3>获取网站证书</h3><p>先把 acme-tiny 脚本保存到之前的 <code>ssl</code> 目录：</p><pre>wget&nbsp;https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py</pre><p>指定账户私钥、CSR 以及验证目录，执行脚本：</p><p>python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /home/microblog/challenges &gt; ./signed.crt</p><p>如果一切正常，当前目录下就会生成一个 <code>signed.crt</code>，这就是申请好的证书文件。</p><p>搞定网站证书后，还要下载 Let&#39;s Encrypt 的中间证书。我在之前的文章中讲过，配置 HTTPS 证书时既不要漏掉中间证书，也不要包含根证书。在 Nginx 配置中，需要把中间证书和网站证书合在一起：</p><pre>wget&nbsp;-O&nbsp;-&nbsp;https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem&nbsp;&gt;&nbsp;intermediate.pem\ncat&nbsp;signed.crt&nbsp;intermediate.pem&nbsp;&gt;&nbsp;chained.pem</pre><p>为了后续能顺利启用 <a href=\"https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html#toc-2\">OCSP Stapling</a>，我们再把根证书和中间证书合在一起：</p><pre>wget&nbsp;-O&nbsp;-&nbsp;https://letsencrypt.org/certs/isrgrootx1.pem&nbsp;&gt;&nbsp;root.pem\ncat&nbsp;intermediate.pem&nbsp;root.pem&nbsp;&gt;&nbsp;full_chained.pem</pre><p>最终，修改 Nginx 中有关证书的配置并 reload 服务即可：</p><p>(示例)：若之前配置过ssl则只需要更改证书就行，若未配置过，则需要添加相关配置参数<br/></p><pre>ssl_certificate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;~/www/ssl/chained.pem;\nssl_certificate_key&nbsp;~/www/ssl/domain.key;</pre><p>实际操作后的配置信息：</p><p>server {<br/>&nbsp;&nbsp;&nbsp; listen&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 443 ssl ;<br/>&nbsp;&nbsp;&nbsp; server_name&nbsp;&nbsp;&nbsp; blog.lehuoha.com;<br/>&nbsp;&nbsp;&nbsp; server_tokens&nbsp; off;<br/>&nbsp;&nbsp; &nbsp;<br/>&nbsp;&nbsp;&nbsp; ssl on;<br/>&nbsp;&nbsp;&nbsp; ssl_certificate&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /home/microblog/ssl/chained.pem;<br/>&nbsp;&nbsp;&nbsp; ssl_certificate_key&nbsp; /home/microblog/ssl/domain.key;<br/>&nbsp;&nbsp;&nbsp; ssl_session_timeout&nbsp; 1d;<br/>&nbsp;&nbsp;&nbsp; ssl_protocols&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TLSv1 TLSv1.1 TLSv1.2;<br/>&nbsp;&nbsp;&nbsp; ssl_ciphers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;<br/>&nbsp;&nbsp;&nbsp; ssl_prefer_server_ciphers&nbsp; on;<br/><br/>&nbsp;&nbsp;&nbsp; ssl_session_cache&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shared:SSL:50m;<br/><br/><br/>&nbsp;&nbsp;&nbsp; ssl_trusted_certificate&nbsp;&nbsp;&nbsp; /home/microblog/ssl/full_chained.pem;<br/>&nbsp;&nbsp;&nbsp; resolver&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 114.114.114.114 valid=300s;<br/>&nbsp;&nbsp;&nbsp; resolver_timeout&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10s;<br/>&nbsp;&nbsp; &nbsp;<br/>&nbsp;&nbsp;&nbsp; if ($request_method !~ ^(GET|HEAD|POST|OPTIONS)$ ) {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return&nbsp;&nbsp; 444;<br/>&nbsp;&nbsp;&nbsp; }<br/>&nbsp;&nbsp; &nbsp;<br/>&nbsp;&nbsp;&nbsp; location / {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_pass http://127.0.0.1:4010;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_redirect off;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header Host $host;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header X-Real-IP $remote_addr;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br/>&nbsp;&nbsp;&nbsp; }<br/><br/>}<br/><br/>server {<br/>&nbsp;&nbsp;&nbsp; server_name blog.lehuoha.com;<br/>&nbsp;&nbsp;&nbsp; server_tokens&nbsp;&nbsp;&nbsp;&nbsp; off;<br/>&nbsp;&nbsp; &nbsp;<br/>&nbsp;&nbsp;&nbsp; access_log&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /dev/null;<br/><br/>&nbsp;&nbsp;&nbsp; location ^~ /.well-known/acme-challenge/ {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alias /home/microblog/challenges/;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try_files $uri =404;<br/>&nbsp;&nbsp;&nbsp; }<br/>&nbsp;&nbsp; &nbsp;<br/>&nbsp;&nbsp;&nbsp; location / {<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rewrite&nbsp;&nbsp; ^/(.*)$ https://blog.lehuoha.com/$1 permanent;<br/>&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp; &nbsp;<br/>&nbsp;&nbsp; &nbsp;<br/>}</p><p>重启nginx服务即可。</p><p>然后访问网站进行测试，结果如下：</p><p><img src=\"/ueditor/files/66e3dbf559902a24272398e20e449a88.png/\" title=\"66e3dbf559902a24272398e20e449a88.png\" alt=\"图片.png\"/><br/></p><h3>配置自动更新</h3><p>Let&#39;s Encrypt 签发的证书只有 90 天有效期，推荐使用脚本定期更新。例如我就创建了一个 <code>renew_cert.sh</code> 并通过 <code>chmod a+x renew_cert.sh</code> 赋予执行权限。文件内容如下：</p><pre>#!/bin/bash\n\ncd&nbsp;/home/microblog/ssl/\npython&nbsp;acme_tiny.py&nbsp;--account-key&nbsp;./account.key&nbsp;--csr&nbsp;./domain.csr&nbsp;--acme-dir&nbsp;/home/microblog/challenges&nbsp;&gt;&nbsp;./signed.crt&nbsp;||&nbsp;exit\nwget&nbsp;-O&nbsp;-&nbsp;https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem&nbsp;&gt;&nbsp;intermediate.pem\ncat&nbsp;signed.crt&nbsp;intermediate.pem&nbsp;&gt;&nbsp;chained.pem\nservice&nbsp;nginx&nbsp;reload</pre><p>crontab 中使用绝对路径比较保险，<code>crontab -e</code> 加入以下内容：</p><pre>0&nbsp;0&nbsp;1&nbsp;*&nbsp;*&nbsp;/home/microblog/ssl/renew_cert.sh&nbsp;&gt;/dev/null&nbsp;2&gt;&amp;1</pre><p>这样以后证书每个月都会自动更新，一劳永逸。实际上，Let&#39;s Encrypt 官方将证书有效期定为 90 天一方面是为了更安全，更重要的是鼓励用户采用自动化部署方案。</p><p><br/></p><p>遗留问题：</p><ol style=\"list-style-type: decimal;\" class=\" list-paddingleft-2\"><li><p>若是网站页面有图片的话，浏览器的地址栏中会有如下这样的显示：<br/></p></li></ol><p><img src=\"/ueditor/files/904024711f7b46f152a2c5922d78d4fa.png/\" title=\"904024711f7b46f152a2c5922d78d4fa.png\" alt=\"图片.png\"/></p><p>原因是因为里面的图片是存放在七牛云的，引用的七牛云的图片是http，所以关于图片的部分会显示不安全。<br/></p><p><br/></p><br/>', '2018-11-03 11:34:13', '5', '9FZRXngUf4kVhjmeQymjYe', '1');
SET FOREIGN_KEY_CHECKS=1;
